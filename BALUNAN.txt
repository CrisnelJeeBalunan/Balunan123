/**
 * @author [Your Name]
 * @section [Your Section]
 * @date [Current Date]
 *
 * This program simulates a linked list using an array and implements
 * basic stack and queue operations: add, poll, peek, and pop.
 */
public class ArrayLinkedListSimulation {

    private int[] array;
    private int size;
    private static final int DEFAULT_CAPACITY = 5;

    public ArrayLinkedListSimulation() {
        this.array = new int[DEFAULT_CAPACITY];
        this.size = 0;
    }

    /**
     * Adds a new element at the end of the array.
     * If the array is full, it doubles the array size and copies existing elements.
     * Simulates enqueueing in a queue or adding to a linked list.
     * @param value The integer value to add to the array.
     */
    public void add(int value) {
        if (size == array.length) {
            // Resize the array if it's full
            int[] newArray = new int[array.length * 2];
            System.arraycopy(array, 0, newArray, 0, array.length);
            array = newArray;
        }
        array[size++] = value;
        System.out.println("Added: " + value);
    }

    /**
     * Removes and returns the first element in the array (simulating head removal).
     * Shifts remaining elements to fill the gap.
     * @return The first element in the array, or -1 if the array is empty.
     */
    public int poll() {
        if (size == 0) {
            System.out.println("Array is empty, cannot poll.");
            return -1; // Special value indicating empty array
        }
        int firstElement = array[0];
        // Shift elements to fill the gap
        for (int i = 0; i < size - 1; i++) {
            array[i] = array[i + 1];
        }
        size--;
        System.out.println("Polled: " + firstElement);
        return firstElement;
    }

    /**
     * Returns the first element without removing it.
     * @return The first element in the array, or -1 if the array is empty.
     */
    public int peek() {
        if (size == 0) {
            System.out.println("Array is empty, cannot peek.");
            return -1; // Special value indicating empty array
        }
        System.out.println("Peeked: " + array[0]);
        return array[0];
    }

    /**
     * Removes and returns the last element in the array (simulating stack behavior).
     * @return The last element in the array, or -1 if the array is empty.
     */
    public int pop() {
        if (size == 0) {
            System.out.println("Array is empty, cannot pop.");
            return -1; // Special value indicating empty array
        }
        int lastElement = array[size - 1];
        size--;
        System.out.println("Popped: " + lastElement);
        return lastElement;
    }

    public static void main(String[] args) {
        ArrayLinkedListSimulation list = new ArrayLinkedListSimulation();

        // Test add method
        list.add(10);
        list.add(20);
        list.add(30);
        list.add(40);
        list.add(50);
        list.add(60); // Test array expansion

        // Test peek method
        list.peek();

        // Test poll method
        list.poll();
        list.poll();

        // Test pop method
        list.pop();
        list.pop();
        list.pop();
        list.pop(); // Should return -1 and print "Array is empty, cannot pop."

        // Test peek and poll on empty array
        list.peek();
        list.poll();
    }
}

/*
   Sample Output:
   Added: 10
   Added: 20
   Added: 30
   Added: 40
   Added: 50
   Added: 60
   Peeked: 10
   Polled: 10
   Polled: 20
   Popped: 60
   Popped: 50
   Popped: 40
   Popped: 30
   Array is empty, cannot pop.
   Array is empty, cannot peek.
   Array is empty, cannot poll.
*/